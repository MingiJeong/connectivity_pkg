#!/usr/bin/env python

# import of relevant libraries
import rospy # module for ROS APIs
import tf
import tf2_ros
from geometry_msgs.msg import PoseWithCovariance, TransformStamped

# import custom module
from connectivity_pkg.auction_robot_super import DEFAULT_POSE_TOPIC, DEFAULT_WORLD_FRAME, DEFAULT_ODOM_FRAME

class TFBroadcastor():
    def __init__(self, robot_total):
        """Constructor."""
        self.robot_total = robot_total
        self.tf_broadcastor_hash_map = dict()

        # setting up subscribers for initialpose
        for i in range(self.robot_total):
            rospy.Subscriber('tb3_{}'.format(str(i)) + "/" +  DEFAULT_POSE_TOPIC, PoseWithCovariance, callback = self._pose_call_back, callback_args=i)
            self.tf_broadcastor_hash_map[i] = tf2_ros.StaticTransformBroadcaster()

    def _pose_call_back(self, msg, robot_name):
        """
        initial pose callback function to execute statif tf broadcaster per each robot frame
        """
        self._static_tf_publisher(msg, robot_name)

    def _static_tf_publisher(self, msg, robot_name):
        """
        function to broadast static tf between world and robot's odom frame
        """
        # http://wiki.ros.org/tf2/Tutorials/Writing%20a%20tf2%20static%20broadcaster%20%28Python%29
        static_transformStamped = TransformStamped()

        # static transform message header
        static_transformStamped.header.stamp = rospy.Time.now()
        static_transformStamped.header.frame_id = DEFAULT_WORLD_FRAME
        static_transformStamped.child_frame_id = "tb3_{}".format(str(robot_name)) + "/" + DEFAULT_ODOM_FRAME

        # translation
        static_transformStamped.transform.translation.x = float(msg.pose.position.x)
        static_transformStamped.transform.translation.y = float(msg.pose.position.y)
        static_transformStamped.transform.translation.z = float(msg.pose.position.z)

        # rotation
        static_transformStamped.transform.rotation.x = float(msg.pose.orientation.x)
        static_transformStamped.transform.rotation.y = float(msg.pose.orientation.y)
        static_transformStamped.transform.rotation.z = float(msg.pose.orientation.z)
        static_transformStamped.transform.rotation.w = float(msg.pose.orientation.w)

        # extract broadcaster and do broadcasting
        broadcaster = self.tf_broadcastor_hash_map[robot_name]
        broadcaster.sendTransform(static_transformStamped)

def main():
    """ Main function """
    """ this node will do static broadcastor depending on the initial pose of the robots"""

    # initialization of node
    rospy.init_node("tf_broadcastor")

    # Sleep for a few seconds to wait for the registration.
    rospy.sleep(3)

    # get params of robot via param server (designate type exlicitly in case of errors)
    robot_total = int(rospy.get_param('~robot_total'))

    # Initialization of the broadcasting class
    tfbroadcastor = TFBroadcastor(robot_total)


    try:
        rospy.logwarn("TF Broadcastor ON")
        rospy.spin()
    except rospy.ROSInterruptException:
        rospy.logerr("ROS node interrupted.")

if __name__ == "__main__":
    """Run the main function."""
    main()